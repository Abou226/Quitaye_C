// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20211010002045_EditClientTable")]
    partial class EditClientTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Achat_Matiere", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MatiereId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantité")
                        .HasColumnType("decimal (18,0)");

                    b.Property<int>("Unité")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("MatiereId");

                    b.ToTable("Achat_Matiere");
                });

            modelBuilder.Entity("Models.Avarier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OffreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantité")
                        .HasColumnType("decimal (18,2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("OffreId");

                    b.HasIndex("UserId");

                    b.ToTable("Avarier");
                });

            modelBuilder.Entity("Models.Categorie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Url")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("UserId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Models.Commune", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("VilleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("VilleId");

                    b.ToTable("Commune");
                });

            modelBuilder.Entity("Models.Conso_Matiere", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MatiereId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantité")
                        .HasColumnType("decimal (18,0)");

                    b.Property<int>("Unité")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("MatiereId");

                    b.ToTable("Conso_Matiere");
                });

            modelBuilder.Entity("Models.Continent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.ToTable("Continent");
                });

            modelBuilder.Entity("Models.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("UserId");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("Models.Entreprise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Nb_Employés")
                        .HasColumnType("int");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuartierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Type_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VilleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("QuartierId");

                    b.HasIndex("Type_Id");

                    b.HasIndex("VilleId");

                    b.ToTable("Entreprise");
                });

            modelBuilder.Entity("Models.EntrepriseUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfAdd")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("UserId");

                    b.ToTable("EntrepriseUser");
                });

            modelBuilder.Entity("Models.ExternalLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ExternalLogin");
                });

            modelBuilder.Entity("Models.Fournisseur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("UserId");

                    b.ToTable("Fournisseurs");
                });

            modelBuilder.Entity("Models.Gamme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategorieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MarqueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Prix_Min")
                        .HasColumnType("decimal (18,2)");

                    b.Property<decimal>("Prix_Unité")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("StyleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("MarqueId");

                    b.HasIndex("StyleId");

                    b.HasIndex("UserId");

                    b.ToTable("Gamme");
                });

            modelBuilder.Entity("Models.Livraison", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Livré")
                        .HasColumnType("bit");

                    b.Property<string>("Raison")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("VenteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VenteId");

                    b.ToTable("Livraison");
                });

            modelBuilder.Entity("Models.Marque", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("UserId");

                    b.ToTable("Marques");
                });

            modelBuilder.Entity("Models.Matière_Premiere", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Unité")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("UserId");

                    b.ToTable("Matiere_Premiere");
                });

            modelBuilder.Entity("Models.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("UserId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Models.Num_Payement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.ToTable("Num_Payement");
                });

            modelBuilder.Entity("Models.Num_Vente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.ToTable("Num_Vente");
                });

            modelBuilder.Entity("Models.Offre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GammeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TailleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("GammeId");

                    b.HasIndex("ModelId");

                    b.HasIndex("TailleId");

                    b.HasIndex("UserId");

                    b.ToTable("Offre");
                });

            modelBuilder.Entity("Models.Panier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contact_Livraison")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_Livraison")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details_Adresse")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Heure_Livraison")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid?>("OffreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Prix_Unité")
                        .HasColumnType("decimal (18,0)");

                    b.Property<decimal>("Quantité")
                        .HasColumnType("decimal (18,0)");

                    b.Property<Guid?>("QuartierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("OffreId");

                    b.HasIndex("QuartierId");

                    b.ToTable("Panier");
                });

            modelBuilder.Entity("Models.PanierReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adresse_Livraison")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<bool>("Annulée")
                        .HasColumnType("bit");

                    b.Property<string>("Autres_Info")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contact_Client")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Contact_Livraison")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_Livraison")
                        .HasColumnType("datetime2");

                    b.Property<string>("Designation")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Details_Adresse")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Heure_Livraison")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Mention")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("NumVenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OffreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Prix_Vente_Unité")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantité")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("QuartierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ServerTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("NumVenteId");

                    b.HasIndex("OffreId");

                    b.HasIndex("QuartierId");

                    b.HasIndex("UserId");

                    b.ToTable("PanierReservation");
                });

            modelBuilder.Entity("Models.PanierVente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Autres_Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contact_Livraison")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_Livraison")
                        .HasColumnType("datetime2");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details_Adresse")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Heure_Livraison")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid?>("OffreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Prix_Unité")
                        .HasColumnType("decimal (18,0)");

                    b.Property<decimal>("Quantité")
                        .HasColumnType("decimal (18,0)");

                    b.Property<Guid?>("QuartierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("OffreId");

                    b.HasIndex("QuartierId");

                    b.ToTable("PanierVente");
                });

            modelBuilder.Entity("Models.Payement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_Payement")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal (18,2)");

                    b.Property<string>("Nature")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Num_Operation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Num_PayementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("Num_PayementId");

                    b.HasIndex("UserId");

                    b.ToTable("Payement");
                });

            modelBuilder.Entity("Models.Pays", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContinentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.HasIndex("EntrepriseId");

                    b.ToTable("Pays");
                });

            modelBuilder.Entity("Models.Produit_Fini", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OffreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantité")
                        .HasColumnType("decimal (18,2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("OffreId");

                    b.ToTable("Produit_Fini");
                });

            modelBuilder.Entity("Models.Quartier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommuneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Quartier");
                });

            modelBuilder.Entity("Models.RefreshToken", b =>
                {
                    b.Property<Guid>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("Refreshable")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("ServerTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Annulée")
                        .HasColumnType("bit");

                    b.Property<string>("Autres_Info")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contact_Client")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Contact_Livraison")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_Livraison")
                        .HasColumnType("datetime2");

                    b.Property<string>("Designation")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Details_Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heure_Livraison")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Mention")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("NumVenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OffreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PanierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Prix_Vente_Unité")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantité")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("QuartierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ServerTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("NumVenteId");

                    b.HasIndex("OffreId");

                    b.HasIndex("QuartierId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Models.Stock_Produit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OffreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantité")
                        .HasColumnType("decimal (18,2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("OffreId");

                    b.HasIndex("UserId");

                    b.ToTable("Stock_Produit");
                });

            modelBuilder.Entity("Models.Style", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("UserId");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("Models.Taille", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategorieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("UserId");

                    b.ToTable("Tailles");
                });

            modelBuilder.Entity("Models.Telephone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("UserId");

                    b.ToTable("Telephones");
                });

            modelBuilder.Entity("Models.Type_Entreprise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Url")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Type_Entreprise");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Active")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("EntrperiseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nom")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Prenom")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("ServerTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("EntrperiseId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Models.Vente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Autres_Info")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contact_Livraison")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_Livraison")
                        .HasColumnType("datetime2");

                    b.Property<string>("Designation")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Details_Adresse")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Heure_Livraison")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid?>("Num_VenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OffreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PanierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Prix_Unité")
                        .HasColumnType("decimal (18,0)");

                    b.Property<decimal>("Quantité")
                        .HasColumnType("decimal (18,0)");

                    b.Property<Guid?>("QuartierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ServerTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("Num_VenteId");

                    b.HasIndex("OffreId");

                    b.HasIndex("QuartierId");

                    b.ToTable("Vente");
                });

            modelBuilder.Entity("Models.Ville", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("PaysId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("PaysId");

                    b.ToTable("Ville");
                });

            modelBuilder.Entity("Models.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntrepriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("UserId");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("Models.Achat_Matiere", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Matière_Premiere", "Matière")
                        .WithMany()
                        .HasForeignKey("MatiereId");

                    b.Navigation("Entreprise");

                    b.Navigation("Matière");
                });

            modelBuilder.Entity("Models.Avarier", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Offre", "Offre")
                        .WithMany()
                        .HasForeignKey("OffreId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");

                    b.Navigation("Offre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Categorie", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Client", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Commune", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Ville", "Ville")
                        .WithMany()
                        .HasForeignKey("VilleId");

                    b.Navigation("Entreprise");

                    b.Navigation("Ville");
                });

            modelBuilder.Entity("Models.Conso_Matiere", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Matière_Premiere", "Matière")
                        .WithMany()
                        .HasForeignKey("MatiereId");

                    b.Navigation("Entreprise");

                    b.Navigation("Matière");
                });

            modelBuilder.Entity("Models.Continent", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.Navigation("Entreprise");
                });

            modelBuilder.Entity("Models.Email", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.User", null)
                        .WithMany("Emails")
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");
                });

            modelBuilder.Entity("Models.Entreprise", b =>
                {
                    b.HasOne("Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Models.Quartier", "Quartier")
                        .WithMany()
                        .HasForeignKey("QuartierId");

                    b.HasOne("Models.Type_Entreprise", "Type")
                        .WithMany()
                        .HasForeignKey("Type_Id");

                    b.HasOne("Models.Ville", "Ville")
                        .WithMany()
                        .HasForeignKey("VilleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Quartier");

                    b.Navigation("Type");

                    b.Navigation("Ville");
                });

            modelBuilder.Entity("Models.EntrepriseUser", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Fournisseur", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Gamme", b =>
                {
                    b.HasOne("Models.Categorie", "Categorie")
                        .WithMany()
                        .HasForeignKey("CategorieId");

                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Marque", "Marque")
                        .WithMany()
                        .HasForeignKey("MarqueId");

                    b.HasOne("Models.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Categorie");

                    b.Navigation("Entreprise");

                    b.Navigation("Marque");

                    b.Navigation("Style");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Livraison", b =>
                {
                    b.HasOne("Models.Vente", "Vente")
                        .WithMany()
                        .HasForeignKey("VenteId");

                    b.Navigation("Vente");
                });

            modelBuilder.Entity("Models.Marque", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Matière_Premiere", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Model", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Num_Payement", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.Navigation("Entreprise");
                });

            modelBuilder.Entity("Models.Num_Vente", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.Navigation("Entreprise");
                });

            modelBuilder.Entity("Models.Offre", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Gamme", "Gamme")
                        .WithMany()
                        .HasForeignKey("GammeId");

                    b.HasOne("Models.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId");

                    b.HasOne("Models.Taille", "Taille")
                        .WithMany()
                        .HasForeignKey("TailleId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");

                    b.Navigation("Gamme");

                    b.Navigation("Model");

                    b.Navigation("Taille");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Panier", b =>
                {
                    b.HasOne("Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Offre", "Offre")
                        .WithMany()
                        .HasForeignKey("OffreId");

                    b.HasOne("Models.Quartier", "Quartier")
                        .WithMany()
                        .HasForeignKey("QuartierId");

                    b.Navigation("Client");

                    b.Navigation("Entreprise");

                    b.Navigation("Offre");

                    b.Navigation("Quartier");
                });

            modelBuilder.Entity("Models.PanierReservation", b =>
                {
                    b.HasOne("Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Num_Vente", "Num_Vente")
                        .WithMany()
                        .HasForeignKey("NumVenteId");

                    b.HasOne("Models.Offre", "Offre")
                        .WithMany()
                        .HasForeignKey("OffreId");

                    b.HasOne("Models.Quartier", "Quartier")
                        .WithMany()
                        .HasForeignKey("QuartierId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Client");

                    b.Navigation("Entreprise");

                    b.Navigation("Num_Vente");

                    b.Navigation("Offre");

                    b.Navigation("Quartier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.PanierVente", b =>
                {
                    b.HasOne("Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Offre", "Offre")
                        .WithMany()
                        .HasForeignKey("OffreId");

                    b.HasOne("Models.Quartier", "Quartier")
                        .WithMany()
                        .HasForeignKey("QuartierId");

                    b.Navigation("Client");

                    b.Navigation("Entreprise");

                    b.Navigation("Offre");

                    b.Navigation("Quartier");
                });

            modelBuilder.Entity("Models.Payement", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Num_Payement", "Num_Payement")
                        .WithMany()
                        .HasForeignKey("Num_PayementId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");

                    b.Navigation("Num_Payement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Pays", b =>
                {
                    b.HasOne("Models.Continent", "Continent")
                        .WithMany()
                        .HasForeignKey("ContinentId");

                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.Navigation("Continent");

                    b.Navigation("Entreprise");
                });

            modelBuilder.Entity("Models.Produit_Fini", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Offre", "Offre")
                        .WithMany()
                        .HasForeignKey("OffreId");

                    b.Navigation("Entreprise");

                    b.Navigation("Offre");
                });

            modelBuilder.Entity("Models.Quartier", b =>
                {
                    b.HasOne("Models.Commune", "Commune")
                        .WithMany()
                        .HasForeignKey("CommuneId");

                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId");

                    b.Navigation("Commune");

                    b.Navigation("Entreprise");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Models.RefreshToken", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Reservation", b =>
                {
                    b.HasOne("Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Models.Num_Vente", "Num_Vente")
                        .WithMany()
                        .HasForeignKey("NumVenteId");

                    b.HasOne("Models.Offre", "Offre")
                        .WithMany()
                        .HasForeignKey("OffreId");

                    b.HasOne("Models.Quartier", "Quartier")
                        .WithMany()
                        .HasForeignKey("QuartierId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Client");

                    b.Navigation("Num_Vente");

                    b.Navigation("Offre");

                    b.Navigation("Quartier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Stock_Produit", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Offre", "Offre")
                        .WithMany()
                        .HasForeignKey("OffreId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");

                    b.Navigation("Offre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Style", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Taille", b =>
                {
                    b.HasOne("Models.Categorie", "Categorie")
                        .WithMany()
                        .HasForeignKey("CategorieId");

                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Categorie");

                    b.Navigation("Entreprise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Telephone", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.User", null)
                        .WithMany("Telephones")
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");
                });

            modelBuilder.Entity("Models.Type_Entreprise", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrperiseId");

                    b.Navigation("Entreprise");
                });

            modelBuilder.Entity("Models.Vente", b =>
                {
                    b.HasOne("Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Num_Vente", "Num_Vente")
                        .WithMany()
                        .HasForeignKey("Num_VenteId");

                    b.HasOne("Models.Offre", "Offre")
                        .WithMany()
                        .HasForeignKey("OffreId");

                    b.HasOne("Models.Quartier", "Quartier")
                        .WithMany()
                        .HasForeignKey("QuartierId");

                    b.Navigation("Client");

                    b.Navigation("Entreprise");

                    b.Navigation("Num_Vente");

                    b.Navigation("Offre");

                    b.Navigation("Quartier");
                });

            modelBuilder.Entity("Models.Ville", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId");

                    b.Navigation("Entreprise");

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("Models.Zone", b =>
                {
                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Entreprise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Telephones");
                });
#pragma warning restore 612, 618
        }
    }
}
